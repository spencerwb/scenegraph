1. (3 pts) In C++, what is a virtual function and how does it relate to object polymorphism? Say I have a class Base and a class Derived that inherits from Base. Both classes implement a non-virtual function called func(). If func() is invoked by dereferencing a Base* that actually points to an instance of Derived, which implementation of func() will be called, and why?

Virtual function is a member function of class declared in base class and overrided in the derived class. This relates to polymorphism because the virtual keyword is C++'s way of implementing Java's Abstract classes. This allows subclasses of a class containing virtual functions to implement or reimplement a virtual function. The implementation to invoke of this function is determined at runtime by the dynamic type of the object. The implementation of func() in the Derived Class will be called because the dynamic type of the Base object is Derived.

2. (2 pts) In polygon.cpp there is a constructor for the Polygon class that takes in a number of sides to construct a regular, convex polygon. There is a section of this constructor's body that sets up "indices" to construct triangles out of the polygon's perimeter vertices. Please draw how these triangles would be formed for a regular convex pentagon (five-sided polygon), and label each vertex with its index number. You may draw your image on a piece of paper and take a photograph, or create it in some sort of image editing software. Your drawing need not be perfect, just make sure it's understandable. In the end, please submit your drawing as a .png image.



3. (5 pts) If I want to write a function that builds my entire scene graph and returns its root node, what should the return type of the function be? Additionally, where in memory should I instantiate the nodes of my scene graph? Why should I instantiate my nodes in this portion of memory?

The return type of the function should be unique_ptr<Node>. You should instantiate the nodes of the scene graph in the heap because nodes instantiated on the stack could be popped off the stack and cause the node to be lost. Also, in order to refer to memory in the stack, you would have to use references. But it is not recommended to have references to elements of a vector because a vector can move its elements to different memory locations without updating the references that point to its contents. Also, you cannot edit what the reference points to.